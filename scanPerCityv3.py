import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from pynput import mouse, keyboard
from webdriver_manager.chrome import ChromeDriverManager

# Vari√°veis para detectar inatividade
last_activity_time = time.time()
activity_detected = False

def on_activity(*args):
    """Atualiza o tempo da √∫ltima intera√ß√£o do usu√°rio (mouse ou teclado)."""
    global last_activity_time, activity_detected
    last_activity_time = time.time()
    activity_detected = True

# Configura os listeners para detectar quando o usu√°rio mexe o mouse ou digita
mouse_listener = mouse.Listener(on_move=on_activity, on_click=on_activity)
keyboard_listener = keyboard.Listener(on_press=on_activity)
mouse_listener.start()
keyboard_listener.start()

def setup_driver():
    """Configura o WebDriver do Chrome para acessar o PlugShare e capturar logs de rede."""
    chrome_options = Options()
    chrome_options.set_capability("goog:loggingPrefs", {"performance": "ALL"})

    driver = webdriver.Chrome(
        service=Service(ChromeDriverManager().install()),
        options=chrome_options
    )

    # üî¥ Limpa os logs de rede antes de come√ßar
    driver.get_log("performance")
    
    return driver

def wait_for_user_search(driver, timeout=5):
    """Aguarda o usu√°rio digitar a cidade e ficar 10 segundos inativo."""
    print("Digite a cidade no PlugShare. O script continuar√° ap√≥s 10 segundos de inatividade.")

    search_box = driver.find_element(By.CSS_SELECTOR, 'input[type="search"]')

    last_text = ""
    while not search_box.get_attribute("value").strip():
        time.sleep(1)

    print("Pesquisa detectada. Aguardando inatividade...")

    global last_activity_time, activity_detected
    activity_detected = False

    while time.time() - last_activity_time < timeout:
        time.sleep(1)

    print("Usu√°rio inativo por 10 segundos. Agora aguardando sele√ß√£o da cidade.")

    # Aguarda o usu√°rio clicar em uma cidade para gerar a URL correta
    try:
        WebDriverWait(driver, 15).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, "a[data-testid='location-link']"))
        )
        print("Cidade selecionada. Continuando o fluxo.")
    except:
        print("‚ö†Ô∏è A cidade n√£o foi selecionada corretamente. Verifique se voc√™ clicou na cidade.")

    return search_box.get_attribute("value").strip()

def extract_latest_establishments_from_logs(driver):
    """Aguarda e captura a √∫ltima requisi√ß√£o `locations/region`, garantindo que seja a mais recente."""
    print("üîç Aguardando a √∫ltima requisi√ß√£o de `locations/region` para capturar os dados corretos...")

    attempts = 0
    latest_request = None
    latest_request_id = None
    establishments_data = None

    while attempts < 10:  # üî¥ Aguarda at√© 10 tentativas (tempo suficiente para a nova requisi√ß√£o aparecer)
        logs = driver.get_log("performance")
        region_requests = []

        for entry in logs:
            try:
                message = json.loads(entry["message"])["message"]
                if message.get("method") == "Network.responseReceived":
                    url = message["params"]["response"]["url"]
                    if "locations/region" in url:
                        region_requests.append((url, message["params"]["requestId"]))  # üî¥ Guarda todas as requisi√ß√µes
            except Exception:
                continue

        if region_requests:
            latest_request, latest_request_id = region_requests[-1]  # üî¥ Pega sempre a mais recente
            print(f"‚úÖ Capturando a √∫ltima requisi√ß√£o de `locations/region`: {latest_request}")

            # Obt√©m os dados do corpo da resposta
            response = driver.execute_cdp_cmd("Network.getResponseBody", {"requestId": latest_request_id})
            establishments_data = json.loads(response["body"])

            break  # Sai do loop assim que capturar a requisi√ß√£o correta

        print("‚è≥ Aguardando a √∫ltima requisi√ß√£o de `locations/region`...")
        time.sleep(2)
        attempts += 1

    if not establishments_data:
        print("‚ùå N√£o foi poss√≠vel capturar os estabelecimentos corretos.")
        return []

    return establishments_data

def extract_phone_from_page(driver):
    """Obt√©m o n√∫mero de telefone de um estabelecimento carregado na p√°gina."""
    try:
        time.sleep(1.4)
        phone_element = driver.find_element(By.XPATH, "//a[contains(@href, 'tel:')]")
        return phone_element.text.strip()
    except:
        return "Telefone n√£o encontrado"

def save_partial_result(city, name, phone):
    """Salva cada n√∫mero imediatamente ap√≥s extra√ß√£o para evitar perda de dados."""
    filename = f"{city.replace(' ', '_')}_phones.txt"
    with open(filename, "a", encoding="utf-8") as f:
        f.write(f"{name} - {phone}\n")
    print(f"‚úÖ Salvo: {name} - {phone}")

def main():
    driver = setup_driver()
    driver.get("https://www.plugshare.com/")
    time.sleep(1.4)
    
    # Aguarda o usu√°rio pesquisar a cidade
    city_name = wait_for_user_search(driver)

    # Captura os estabelecimentos diretamente da √∫ltima requisi√ß√£o de `locations/region`
    establishments = extract_latest_establishments_from_logs(driver)

    if not establishments:
        print("‚ùå Nenhum estabelecimento encontrado.")
        driver.quit()
        return

    print(f"‚úÖ {len(establishments)} estabelecimentos encontrados.")

    # üî¥ Adicionando logs para garantir que todos os estabelecimentos est√£o sendo processados
    processed_count = 0

    # Obt√©m os n√∫meros de telefone acessando cada URL na p√°gina
    for est in establishments:
        name = est.get("name", "Nome n√£o encontrado")
        detail_url = est.get("url", "")
        
        if not detail_url:
            print(f"‚ö†Ô∏è Sem URL para {name}, pulando...")
            continue
        
        print(f"üîç Acessando {name}: {detail_url}")
        
        driver.get(detail_url)
        phone = extract_phone_from_page(driver)
        save_partial_result(city_name, name, phone)

        processed_count += 1

    print(f"‚úÖ Processamento conclu√≠do: {processed_count}/{len(establishments)} estabelecimentos salvos.")

    driver.quit()

if __name__ == "__main__":
    main()
